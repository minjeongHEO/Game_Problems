/**
1. 1~8까지 랜덤한 숫자 배열 생성
2. 화면에 출력
3. 두 숫자를 입력
4. 정렬되었는지 검사
5. 아니라면 2번으로 이동
 */
/**
 * 1. 출력 
✔ 콘솔에 게임 타이틀을 출력한다.
✔ 다음 줄에 현재 턴을 출력한다. 시작은 0이 아니고 1부터이다.
✔ 다음 줄에 1 - 8 까지의 숫자를 무작위로 섞고 한 줄로 출력한다.
✔ 마지막 줄에는 교환할 두 숫자를 입력> 라는 프롬프트를 출력한다.

--[출력예시]--
간단 숫자 퍼즐
Turn 1
[2, 4, 8, 6, 7, 3, 5, 1]
교환할 두 숫자를 입력>
 */

let TURN = 1;

/** 랜덤 함수 */
function random() {
  //*1)
  // 1~8까지의 숫자 배열을 생성
  let array = Array.from({ length: 8 }, (_, index) => index + 1);

  // 배열섞기 *2)
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }

  return array;
}

function main() {
  console.log('PUZZLE GAME🧩');
  console.log(`Turn : ${TURN}`);
  console.log(`[${random()}]`);
  prompt('교환할 두 숫자을 입력 > ');
}

main();

/**
 * 1) 각 숫자를 생성할 때마다 이미 생성된 숫자와 중복되지 않는지 확인하는 방법도 있음.
 *    하지만 이 방법은 숫자의 범위가 커질수록 비효율적
 *    - Math.floor(): 주어진 숫자보다 크지 않은 가장 큰 정수를 반환합니다. 즉, 소수점 이하를 버립니다.
 *    - Math.random(): 0 이상 1 미만의 부동소수점 실수를 무작위로 반환합니다. 즉, 반환되는 숫자는 0이상 1미만
 * 2) 앞에서부터 시작한다면, 이미 처리된 요소가 다시 처리될 수 있어 효율성이 떨어질 수 있음
 *    따라서, 일반적으로는 뒤에서부터 처리하는 방식이 선호됨.
 *    구조 분해 할당 사용
 */
